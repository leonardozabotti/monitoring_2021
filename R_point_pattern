# ---- POINT PATTERN
# remember to set the ~lab folder as the working directory

setwd("C:/Users/Leonardo/Desktop/Università/UNIBO/PRIMO ANNO/MONITORING ECOSYSTEMS CHANGES AND FUNCTIONING/lab")

# let's install the package we need = "spatstat"

install.packages("spatstat")
library(spatstat)

#let's now import a .csv file already present in the WD

covid <- read.table("covid_agg.csv", header=TRUE)     #header means that the table already has an header so the fist line is not data
covid

# Now let's see the density of covid data!

# the function we are going to use is \ppp\ to make a Planar Point Pattern that R need to build spatial maps
help(ppp)     # to see parameters

# before going on, since we'll use just one dataset is better to \attach()\ it

attach(covid)

# let's now use \ppp(x, y, x.range, y.range,)\ . If you don't remember the names of variables just put \names(covid)\

covid_planar <- ppp(lon, lat, c(-180,180), c(-90, 90))   # the ranges are the ranges of Earth's longitude and latitude; in general the range of coordinates are the range of the final map that we want to obtain or just increase a bit the range present in the dataset

#once the planar point pattern is created we can create a map using the \density()\ function that uses the covid ppp

density_map <- density(covid_planar)
plot(dens_map)      #shows the map obtained in the ranges selected

#if we want to put points on top of our map we can:
points(covid_planar)

 # \colorRampPalette()\ changes the colours of the range in the map according to density. Colours are important ("The misure of coulour in science communications" check paper on Nature)
 
cl <- colorRampPalette(c('yellow', 'orange', 'red'))(100)      #the number (100) means that in between colours we want 100 shades; order of colours are from lower to higher value; check colours in R on Google
plot(dens_map, col = cl)
points(covid_planar)

# we are now ready to put country border on the map using another package which is \rgdal\ that uses a library of geospatial data abstraction open source made from osgeo.org

install.packages("rgdal")
library(rgdal)

#download ne_10m coastline file from VIRTUALE  and put them in the WD; .shp file has info about spatial distribution, .dbf has the dataset related to coordinates, .shx has indexes connecting spatian data to dataset

coastlines <- readOGR("ne_10m_coastline.shp")   #we import a shape file and we give it a name

# we can now add the coaslines on the density map already plotted
plot(density_map, col = cl)
points(covid_planar)
plot(coastlines, add = TRUE)      # \add=TRUE\ means that we want to plot the lines on top of the previous map; if we don't do that it will plot coastlines in a different plot

cl <- colorRampPalette(c('pink','green','orange','red','magenta'))(100) #we can change colours  
plot(density_map, col = cl)       
points(covid_planar, pch= 19 , cex= 0.5 )       # we are even changing the \pch\ ; remembere to search "pch R" in Google to see all numbers; we can add \cex = XX\ to change size of points
plot(coastlines, add = TRUE)

# how to export maps? just by using the "export" button on the R Studio interface or using the command \png()\ or the command \pdf()\

png("figure1.png")       #now we can list all the images we'd like to export in the WD
cl <- colorRampPalette(c('pink','green','orange','red','magenta'))(100) 
plot(density_map, col = cl)       
points(covid_planar, pch= 19 , cex= 0.5 )       
plot(coastlines, add = TRUE)
dev.off()       #this command close the graphic interface and create the file

pdf("figure1.pdf")       #now we can list all the images we'd like to export in the WD
cl <- colorRampPalette(c('pink','green','orange','red','magenta'))(100) 
plot(density_map, col = cl)       
points(covid_planar, pch= 19 , cex= 0.5 )       
plot(coastlines, add = TRUE)
dev.off()       #this command close the graphic interface and create the file


## INTERPOLATION

marks(covid_planar) <- cases   #we explain to R where to find the data stating the column of the dataset and using \marks()\ to put the data in every single point of the map
cases_map <- Smooth(covid_planar)        # \Smooth()\ is the function to create interpolation

plot(cases_map)       #just to see a draft of the map

plot(cases_map, col=cl)
plot(coastlines, add=T)      # REMEMBER TO PUT add=T
points(covid_planar, pch=19, cex=0.2)

#CODE BY NORMA: INTERPOLATION WITH DIFFERENTLY SIZED POINTS to show two types of information in one map (size of points is based on the number of cases)

setwd("C:/Users/Leonardo/Desktop/Università/UNIBO/PRIMO ANNO/MONITORING ECOSYSTEMS CHANGES AND FUNCTIONING/lab")

library(spatstat)
library(rgdal)

covid <- read.table("covid_agg.csv", header=TRUE)        #or read.csv
attach(covid)                                            #so the lon and lat will read automatically from covid instead of writing covid$lon and covid$lat
covid_planar <- ppp(lon, lat, c(-180,180), c(-90, 90))

marks(covid_planar) <- cases                   #we explain to R where to find the data stating the column of the dataset and using \marks()\ to put the data in every single point of the map
cases_map <- Smooth(covid_planar)              # \Smooth()\ is the function to create interpolation
coastlines <- readOGR("ne_10m_coastline.shp")  #we will need coastlines


cl <- colorRampPalette(c('lightpink2','lightsalmon','tomato1','red3','maroon'))(100)
density_map <- density(covid_planar)
plot(density_map)
plot(cases_map, col = cl)
plot(coastlines, add = T)

#install.packages("sf")
library(sf)
Spoints <- st_as_sf(covid, coords = c("lon", "lat"))         #the function takes the covid data and the coordinates
plot(Spoints, cex=Spoints$cases, col = 'purple3', lwd = 3, add=T)            #points are too big
plot(Spoints, cex=Spoints$cases/10000, col = 'purple3', lwd = 3, add=T)      #dividing the point size is necessary to have points whose size fit in the map

#now let's plot all together
cl <- colorRampPalette(c('lightpink2','lightsalmon','tomato1','red3','maroon'))(100)
plot(cases_map, col = cl)
plot(coastlines, add = T)
plot(Spoints, cex=Spoints$cases/10000, col = 'purple3', lwd = 3, add=T) 



###---INTERPOLATION FROM STUDENT'S DATA

#  IMPORTANT:REFERENCE SYSTEMS. Earth is a geoid (surface perpendicular to the gravity force - equipotential surfaces and the geoid surface is the sea level) so we use a different surface and not the topographic surface 
#                               ED50 (called international ellipsoid) is the ellipsoid used for Europe but it's not good for North America that actually uses NAD27 (called Clarke ellipsoid) as the reference ellipsoid but there are
#                               plenty of different ellipsoids. So every time we use coordinates like longitude and latitude we need to state the reference system. Nowadays they're promoting the World Geodetic System trying to use
#                               the same system worldwide. Also the GPS (Global Position System) use the same coordinates. UTM is the Universal Transverse Mercator that project Earth'surface in a flat plane (every piece is called zone
#                              or "fuso" in italian). This allow us to measure the distance from the Meridian. Greenwich meridian is given a number different to zero in order not to have negative numbers of the left side of the planet.
#                              In UTM every zone is 6 degrees and there are 60 zones. Italy is divided into two zones: from 6 to 12 degrees and from 12 to 18 degrees. 
#                              In the data we're using coordinates are calculated in meters (Gauss Boaga system) from the Greenwich Meridian (x) and from the Equator (y).

#let's import the data. REMEMBER TO SET THE WD BEFORE THAT

setwd("C:/Users/Leonardo/Desktop/Università/UNIBO/PRIMO ANNO/MONITORING ECOSYSTEMS CHANGES AND FUNCTIONING/lab")

leo <- read.table("dati_zabotti.csv", head=T, sep=",")  
head(leo)

##    We want to make the PPP in order to build the density map

attach(leo)

library(spatstat)
leo_ppp <- ppp(x, y, c(2300000,2325000), c(5005000,5045000))       # \summary(leo)\ will show the minimum and maximum x and y in order to build the range (usually bigger than the values)

dens_leo <- density(leo_ppp)      #to build the density object and then plot it
plot(dens_leo)
points(leo_ppp)

###---HOW TO SAVE WORKSPACE? Go to file menu so next time you open we don't have to import data again

###-- HOW TO LOAD RDATA FILES: \load("point_pattern_analysis.RData")\ after putting the file in the WD and setting the WD

##   We now want to interpolate missing data

marks(leo_ppp) <- chlh        #we're interpolating the values of chlorophyll explaining to R what is the variable we want to use. Remember \libray(spatstat)\ and \attach(leo)\
chlh_map <- Smooth(leo_ppp)
plot(chlh_map)

# Let'a change the color ramp palette
cl <- colorRampPalette(c('yellow','orange','red','green'))(100) 
plot(chlh_map, col=cl)
points(leo_ppp)

marks(leo_ppp) <- t
t_map <- Smooth(leo_ppp)
plot(t_map)
points(leo_ppp)

# Exercise: do the same for chlorophyll in the sediment (chls)

marks(leo_ppp) <- chls
chls_map <- Smooth(leo_ppp)
plot(chls_map)
points(leo_ppp)

 ###---CREATING PANELS WITH MORE MAPS

par(mfrow=c(1,3))       # Function that set some graphical parameters. In this case we build a MULTIFRAME with \mf\ and then we state how many maps in a row or column- \mfrow=c(1.3)\ mans we want 1 row and 3 columns
plot(dens_leo)
points(leo_ppp)
plot(chlh_map)
points(leo_ppp)
plot(chls_map)
points(leo_ppp)
# we can of course change the colours by creating a ramppalette and stating \col=cl\

#----------Exercise: build a panel with 3 rows and  column

cl <- colorRampPalette(c('yellow','orange','red','green'))(100) 

par(mfrow=c(3,1))

plot(dens_leo, col=cl)
points(leo_ppp)

plot(chlh_map, col=cl)
points(leo_ppp)

plot(chls_map, col=cl)
points(leo_ppp)
#-------------------------------------------------


